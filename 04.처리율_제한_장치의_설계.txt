처리율 제한 장치
- clinet or 서비스가 보내는 트래픽의 처리율을 제어하기 위한 장치
- 특정기간 내에 번송되는 클라이언트의 요청 횟수를 제한한다.
- API 요청횟수가 제한장치에 정의된 임계치를 으로 이후도달된 호출은 처리중단

처리율 제한 장치 장점
- Dos공격의 자원고갈을 방지할 수있다.
- 우선순위가 놓은 aPI에 더 많은 지원 할당.
- 서버 과부하를 막아 잘못된 이용패턴으로 유발된 트래픽을 걸러진다.

---

1단계 문제 이해 및 설계 점위 확정
2단계 개략적 설계안 제시 및 동의 구하기
3단계 상세 설계

---

Q. 처리율 제한 장치는 어디에 둘 것인가?

1. 첫번째 경우의 수 
: 클라이언트측 -> 처리율 제한을 안정적으로 걸수 있는 장소가 못된다.

2. 두번째 경우의 수
: 서버 측 -> API서버로 전송 / 미들웨어에 의해 가로막히도 클라에서 상태토드 '429'반환

3. 완전위착관리형 서비스
: SSL종단, 사용자 인증, IP허용목록관리
: 클라우드 업체가 유지보수를 담당하는 서비스

결론
1. 프로그래밍 언어, 캐시 서비스 등 현재 사용하고 잇는 기술 스택을 점검해라
2. 사업 필요에 맞는 처리율 제한 알고리즘을 찾아라
3. API게이트워이를 이미 설계에 있다면, '처리율제한기능'에 포함하라
4. 처리율 제한 장치를 구현하는데 인력이 없다면, API게이트웨이를 쓰자

---

처리율 알고리즘
- 토큰 버킷
- 노출 버킷
- 고정 윈도 카운터
- 이동 윈도 로그
- 이동 윈도 카운터

---

개략적인 아키텍처 - 요청의 카운터값이 한도를 넘으면 요청을 거부하는 것

Q. 카운터의 값 어디에 저장?
1. 데이터베이스 : 디시크 접근시 느려 사용하면 안됨.
2. 캐시 : 빠르고, 시간에 기반한 만료 정책을 지원함.

ex> Redis 
: 처리율 제한 장치를 구현할 때 자주 사용되는 메모리 기반 저장장치
: INCR   - 메모리에 저장된 카운터의 값을 1만큼 증가한다.
  EXPIRE - 설정된 시간이 지나면 카운터는 자동으로 삭제

--- 

처리율 제한 장치의 개략적 구조 - 클라이언트가 처리율 제한 미들웨어에게 요청

처리율 제한 장치 
: 레디스의 지정 버팃에서 카운터를 가져와 한도를 검사한다.
: 한도초가가 안되면 'API서버 전달'

미들웨어
: 카운터의 값을 증가 시킨 후 redis에 저장한다. 

---
[3단계 상세설계]
---

처리율 제한 규칙
- 설정 파일(configuration file)형태로 디스크에 저장된
ex> nginx.conf [core, http, server, location, events]

domain : auth
descroptors:
  - key: suth_type
    Value : login
    rate_limit:
      unit : minute
      requests_per_unit : 5

---

처리율 한도 초과 트래픽의 처리
- API는 HTTP 429 응답을 클라이언트에게 보냄.
- 한도로 인한 메시지는 큐에 보관후 처리할 수 잇음.

처리율 제한 장치가 사용하는 HTTP헤더
-> HTTP 응답헤더(response header)를 통해 몇개의 요청을 보낼 수 잇는가
X-Ratelimit-Remaining   : 윈도 내에 남은 처리 가능 요청의 수
X-Ratelimit-Limit       : 매 윈도마다 클라이언트가 전송할 수 있는 요청의 수
X-Ratelimit-Retry-After : 지속적으로 요청할 수 있는 기준 제시
사용자가 너무 많으면 429오류를 X-Ratelimit-Retry-After해더와 함께 반환
---

분산 환경에서의 처리율 제한 장치의 구현

- 경쟁 조건
- 동기화 이슈
- 성능 최적화
- 모니터링
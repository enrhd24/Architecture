시스템 설계
: 도전적인 과제
: 지속적인 계량과 끝없는 개선이 요구되는 여정

목적 : 규모 확장성과 관계된 설계 문제의 쓰일 유용한 지식

==============================================
01. 단일 서버
02. 데이터베이스
03. 수직적 규모 확장 vs 수평적 규모 확장
04. 캐시
05. 콘텐츠 전송 네트워크(CDN)
06. 무상태(stateless) 웹 계층
07. 데이터 센터
08. 메시지 큐
09. 로그, 메트릭 그리고 자동화
10. 데이터베이스의 규모 확장
11. 백만 사용자, 그리고 그 이상
==============================================

-----------------------------------------------
01. 단일 서버
: 컴포넌트가 단 한 대의 서버에서 실행되는 간단한 시스템 설계
: 웹, 앱, 데이터베이스, 캐시 등이 전부 서버 한 대에서 실행된다.

시스템 구성
: 사용자의 요청이 처리되는 과정
: 요청을 만드는 단말

DNS    -> 1. api.mysite.com 2. 15.125.23.214
웹 서버 -> 3. 15.125.23.214  4. HTML 페이지
-----------------------------------------------
02. 데이터베이스
: 서버 하나로는 충분하지 않아 여러 서버를 두어야 한다.
1. 웹/모바일 트래픽 처리(웹 계층)
2. 데이터베이스용(데이터 계층)
// 분리하면, 각각을 독립적으로 확장해 나살 수 있게 된다.

어떤 데이터베이스?
1. 관계형 데이터베이스 (관계형 데이터베이스 관리 시스템)
: MYSQL, 오라클 데이터 베이스, PostgreSQL
: 자료를 테이블과 열, 칼럼으로 표현한다,
: 여러 테이블에 있는 데이터를 관계에 따라 조인하여 합칠 수 있음.
// 40년 이상 사장에서 살아남아 잘 사용되어 온 시스템

2. 비-관계형 데이터베이스
: NOSQL(CouchDB, Neo4j, Cassandra, HBase,Amazon DynamoDB)
: 키-값 저장소, 그래프장소, 칼럼 저장소, 문서 버방소로 부류를 나눈다.
:  일반적으로 조인 연산은 지원하지 않는다.
1. 아주 낮은 응답 지연시간, 2. 데이터가 비정형, 
3. 데이터을 직렬화하거나 역질렬화할 수 있기만 하면됨, 
4. 아주 많은 데이터를 저장할 필요가 있음
// 일때, 비-관계형 데이터베이스가 바람직한 선택일 수 있다.
---------------------------------------------
03. 수직적 규모 확장 vs 수평적 규모 확장
수직적 규모 확장(스케일 업)
: 서버에 고사양 자원을 추가하는 행위
: 서버로 유입되는 트래픽의 양이 적을 때 사용하는 단순함.
1. 한 대의 서버에 CPU나 메모리를 무한대로 증설할 방법이 없다.
2. 장애에 대한 자동복구 방안이나 다중화 방안을 제시하지 않는다.
3. 서버에 장애가 발생하면 웹사이트.앱은 완전히 중단된다상

수평적 규모 확장(스케일 아웃)
: 더 많은 서버를 추가하여 성능을 개선하는 행위
: 대규모 애플리케이션을 지원하는데, 이 방법이 적합하다.

웹 서버가 다운시
: 웹 사이트에 접속할 수 없다.
: 서버가 한계 상황에 도달하게 되면 응답속도 느려짐 및 서버 접속 불가능
// 이런 문제를 해결하기 우해 "부하 분산기" 또는 "로드밸런서"를 도입하는 것이 최선.

로드벨런서
: 부하 분산 집합에 속한 웹 서버들에서 트래픽 부하를 고르개 분산하는 역할
1. 사용자는 로드밸런서의 공개 IP주소로 접속 
// 웹 서비는 클라이언트 접속을 직접 처리하지 않는다.
// 보안을 위해 서버 간 통신에서는 사설 IP주소가 이용된다.

사설 IP주소
: 같은 네트워크에 속한 서버 사이의 통신에만 쓰일 수 있는 IP주소
: 인터넷을 통해서는 접속할 수 없다.
// 로드벨런서는 웹 서버와 통신하기 위해 바로 이사설 주소를 이용한다.

장점
1. 장애를 자동복구하지 못하는 문 해소
2. 웹 계층의 가용성은 향상

데이터베이스 다중화
: 위에서는 데이터베이스 서버뿐이고, 장애의 자동복구나 다중화를 지원하는 구성이 아님
  따라서 이러한 문제를 해결하는 보편적인 기술
1. 마스터 슬레이브관계를 설정하고 데이터 
(1) 원본-> 부 서버, (2)사본-> 부 서버에서 저장하는 방식
쓰기 연산 : 마스터에서만 지원
읽기 연산 : 부 데이터베이스로부터 그 사본을 전달 받는다. 
        : ex> insert, delete, update
// 부 데이터 베이스의 수가 주 데이터베이스의 수보다 많다
이득 : 더 나은 성능, 안정성, 가용성

응답 시간 : 캐시
정적 콘텐츠 : 콘텐츠 전송 네트워크(CDN)
// 옮기면 개전할 수 있다.
---------------------------------------------
04. 캐시
: 데이터를 메모리 안에 두고, 요청이 보다 빨리 처리될 수 있도록 하는 저장소
: 새로고침 할 때 표시할 데이터를 가져오기 위해 한 번 이상의 데이터베이스 호출이 발생
// 애플리케이션의 성능은 데이터베이스를 얼마나 자주 호출하느냐에 따라 좌우된다.

캐시 계층
: 데이터가 잠시 보관되는 곳
: 성능이 개선될 뿐 아니라 데이터베이스의 부하를 줄일 수 있음
: 캐시 계층의 구모를 독립적으로 화갖ㅇ시키는 것도 가능

주도형 캐시 전략
: 요청을 받은 웹 서버는 개시에 저장이 되어 있다면 클라이언트에 반환한다.
: 만일 저장이 디어 있지 않다면,
  데이터베이스 질의를 통해 데이터를 찾아 캐시에 저장하구 클라이언트에 잔환한다.

캐시 서버를 이용하는 방법 : 캐시 서버들이 일반벅으로 널리 쓰이는 프로그래밍 언어로 API를 제공
단일 장애 지점 : 어떤 특정 지점에서의 장애가 전체 시스템의 동작을 중간시켜버릴 수 있는 경우
---------------------------------------------
05. 콘텐츠 전송 네트워크(CDN)
: 정적 콘텐츠를 전송하는데 쓰인다.
: 지리적으로 분산된 서버의 네트워크
: CSS, JavaScript 파일 등을 캐시 할 수 있음.

1. 정적 콘텐츠는 더 이상 웹 서버를 통해 서비스하지 않는다.
   CDN을 통해 제공하여 더 나온 성능을 보장한다.
2. 캐시가 데이터베이스 부하를 줄여준다.
동적 콘텐츠 캐시
: 요청 경로, 질의 문자열, 쿠키, 요청 헤더 등에 
  정보에 기반하여 HTML 페이지를 캐시하는 것
---------------------------------------------
06. 무상태(stateless) 웹 계층
: 웹계층을 수평적으로 확장하는 방법을 고민하기 -> 이를 위해 상태 정보를 웹 계층에서 제거해야 함.
// 데이터베이스나 NoSQL와 같은 지속성 저장소에 보관하고, 칠요할 땨 가져오도록 하는 것

상태 정보 의존적인 아키텍처
: 상태 정보를 보관하는 서버는 1.클라이언트 정보 [상태를 유지하여 요청들 사이에 공유되도록 한다.]
: 무상태 서버에는 이런 장치가 없다.
: 로드밸런서가 이를 지원하기 위해 고정 세션이라는 기능을 제공한다.
  하지만, 로드벨런서에 부담을 주어 뒷단에 서버를 추가하거나 제거하기도 까다로워지고, 
  서버의 장애를 처리하기도 복잡해진다.

무상태 아키텍처
: 상태 정보는 웹 서버로부터 물리적으로 분리되어 있어 이러한 구조는 단순하고, 안정적이며, 규모 확장이 쉽다
: 관계령 데이터베이스일 수도 있고, 캐시 시스템일 수도 있고, 노 에스큐엘일 수도 있다.
: 트래픽 약에 따라 웹 서비를 넣거나 빼기만 하면 자동으로 규모를 확장할 수 있게 되었다.
---------------------------------------------
07. 데이터 센터
: 가용성을 높이고, 전 세계 어디서도 쾌적하게 사용할 수 있도록 하기 위한 것.

지리적 라우팅 
: 사용자는 가장 가까운 데이터 센터로 안내되는 것
: geoDNS 사용자의 위치에 따라 도메인 이름을 어떤 아이피 
  주소로 변환할지 결정할 수 있도록해주는 DNS 서비스
// 데이터 센터 중 하나에 심각한 장애가 발생시 모든 트래픽은 장애가 없는 데이터 센터로 전송

1. 트래픽 우회 : 올바른 데이터 센터로 트래픽을 보내는 효과적인 방법을 찾는다.
2. 데이터 동기화 : 데이터를 여러 데이터 센터에걸쳐 다중화하는 것
3. 테스트와 배포 : 모든 데이터 센터에 동일한 서비스가 설치되록 하는 데, 중요한 역할을 한다,
---------------------------------------------
08. 메시지 큐
: 시스템의 컴포너느를 분리하여, 각기 독립적으로 확장될 수 있도록 하는 것
// 실제 분산 시스템이 이 문제를 풀기 위해 채용하고 있는 핵심적 전략 가운데 하나

-> 메시지의 무손실을 지원하는 컴포넌트
-> 메시지의 버퍼 역할을 하며, 비동기적으로 전송한다.
: 입력 서비스가 메시지를 만들어 메시지 큐에 발생(publish)한다.
: 구독자(subscriber)라 불리는 서비스 혹은 서버에 연결된다.
// 메시지를 받아 그에 맞는 동작을 수행하는 역할을 한다.

-> 구모 확장성이 보장되어야 하는 안정적 애플리케이션을 구성하기 좋다.
-> 생산자는 프로세스가 다운이 되도 메시지를 발행할 수 있고,
   소비자는 서비스가 가용한 상태가 아니더라도 메시지를 수신 할 수 있다.
---------------------------------------------
09. 로그, 메트릭 그리고 자동화
: 몇 개 서버에서 실행되는 소규모 웹 사이트를 만들 때는 로그나 메트릭, 자동화하면 좋음.
: 웹 사이트와 사업 규모가 커지면, 그런 도구에 필수적으로 투자해야 한다.

1. 로그
-> 에러 로그를 모니터링하는 것은 중요
: 시스템의 오류와 문제들을 보다 쉽게 찾아낼 수 있돌고 하기 때문이다.
: 서버 단위로 모니터링 할 수 있다.
: 단일 서비스로 모아주느 도구를 활용하면 더 쳔리하게 검색하고 조회할 수 있다.
2. 메트릭
-> 시스템의 현재 상태를 손쉽게 파악할 수 있다.
: 호스트 단위 메트릭 -> 메모리, 디스트 아이오 
: 종합 메트릭 -> 데이터베이스 계층의 성능, 개시 계층의 성능
: 핵심 비즈니스 메트릭 -> 일별 능동 사용자, 수익, 재방문
: 자동화 -> 어떤 검증 절차를 자동으로 거치도록 할 수 있어서 문제르 쉽게 감지할 수 있음
        -> 빌드, 테스트, 배포 등의 절차를 자동화할 수 있어 개발 생산성을 크게 향상시킬 수 있음
--------------------------------------------
10. 데이터베이스의 규모 확장
: 데이터베이스 규모를 확장하기 위해 데이터베이스를 증설할 방법을 찾아야 한다.

1. 수직적 확장
-> 스케일 업 : 고성능의 자원을 증설하는 방법
-> 고성능 데이터베이스 서버는 많은 양의 데이터를 보관하고 처리할 수 있다.

2. 수평적 확장(샤딩)
-> 더 많으 서버를 추가함으로써 성능을 향상시킬 수 있도록 한다.
-> 샤딩이란? 샤드라고 부르는 작은 단위로 분할하는 기술을 일컫는다.
- 데이터의 재 샤딩, - 유명인사 문제, - 조인과 비정규화
---------------------------------------------
11. 백만 사용자, 그리고 그 이상
: 비속적이고 반복적인 과정이다.
: 사용자 이상을 지원하려면 새로운 전략을 도입하구, 시스템을 가다듬어야 할 것
// 시스템을 최적화하고 더 작인 단위의 서비스로 분할해야 한다.
---------------------------------------------

정리
: 새롭게 등장하는 도전적 과제를 해결하기 위한 훌륭한 자양분이 되어 줄 것
: 웹 계층은 무상태 계층으로
: 모든 계층에 다중화 도입
: 가능한 한 많은 데이터를 캐시할 것
: 여러 데이터 선테를 지원할 것
: 정적 콘턴츠는 CDN을 통해 서비스 할 것
: 데이터 계층은 샤딩을 통해 그 규모를 확장할 것
: 각 계층은 독립적 서비스로 분할할 것
: 시스템을 지속적으로 모니터링하고, 자동화 도구들을 활용할 것

### key-value store 
- 키-값 데이터베이스라고 불리는 비 관계형 데이터베이스이다.
- 값은 고유 식별자를 키로 가져야 하며, "키-값" 쌍이라고 지칭

### 이번 장에서는 키-값 저장소를 설계해 볼 것이다.
- put(key,value) -> 키-값 쌍을 저장소에 저장한다.
- get(key)       -> 인자로 주어진 키에 매달린 값을 꺼낸다.

---

### 문제 이해 및 설계 범위 확장
- 읽기,쓰기, 메모리 사용량 사이 균형, 
- 데이터의 일관성, 가용성 사이에 타협적 결정

### 단일 서버 키-값 저장소
- 한 대 서버만 사용하는 키-값 저장소를 설계하는 것은 쉽다.
- 가장 직관적인 방법은 키-값 쌍 전부를 메모리에 해시 테이블로 저장하는 것
- 데이터를 메모리 안에 두는 것일 불가능하여 "데이터 압축","디스크 저장"

### 분산 키-값 저장소
- CAP 정리
  : 일관성, 가용성, 파티션 감내하는 요구사항을 만족하는 분산 시스템을 설계하는 것은 불가능하다.
  : 3가지 중에 어떤 두 가지를 충족하려면 나지 하는 반드시 희생되어야 한다는 것
    - 이상적 상태
      : 네트워크가 파티션되는 상황은 절대 일어나지 않을 것이다.
    - 실세계의 분산 시스템
      : 파티션 문가 발생하면, 일관성과 가용성 사이에서 하나를 선택해야 한다.
      : 장애가 발생하여 각각의 노드와 통신할 수 없는 상황을 보여준다.
- 시스템 컴포넌트
  : 저장소 구현에 사용될  컴포넌트를 및 기술들을 살펴볼 것이다.
    - 데이터 파티션
      : 데이터를 파티션 단위로 나눌 때는 작은 파티션 단위로 분할하여 여러 대 서버에 저장
      : 1. 데터를 여러 서버 고게 분산할 수 있는가?
      : 2. 노드가 추가 및  삭제될 때  데이터 이동을 최화할 수 있는 가
    - 데이터 다중화
      : 가용성과 안정성을 확보하기 위해 데이터를 N개 서버에 비동기적으로 다중화할 필요가 있다.
      : 해당 키가 서버에 저장시 물리 서버를 중복 선택하지 않도록 하애 한다
    - 데이터 일관성
      : 정족수 합의 프로토콜을 사용하면 읽기/쓰기 연산 모드 일관성을 보장할 수 있다.
      : 요구되는 일관성 수준에 따라 W,R,N의 값을 조정하면 된다.
    - 시스템 아키텍처 다이어그램
      : 키-값 저장소가 제공하는 2가지 단순한 API
      : 중재자는 클라이언트에게 키-값 저장소에 대한 프락시역할을 하는 노드이다.
      : 노드는 안정 해시의 해시 링위에 분포한다.
- 쓰기 경로
  : 쓰기 요청이 특정 노드에 전달되면 무슨 일이 벌어지는지를 보여준다.
  : 기본적으로 카산드라의 사례를 참고한 것인에 유의하기 바란다.
- 읽기 경로
  : 데이터가 메모리 캐시에 있는지부터 살핀다.
  : 어느 테이블에 찾는 키가 있는 알아낼 효율적인 방법은 블룸팔터가 흔히 사용된다.